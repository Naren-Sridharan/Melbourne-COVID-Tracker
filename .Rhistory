data$date <- sapply(data$date, function(d){strptime(d, format="%Y-%m-%d")})
View(data)
data$date <- sapply(data$date, function(d){as.Date.POSIXct(d, format="%Y-%m-%d")})
View(data)
View(data)
data <- rbind(merged_ped_data, merged_park_data, covid_data);
data$date <- sapply(data$date, date_fun})
data$date <- sapply(data$date, date_fun)
View(covid_data)
View(data)
str(data$date)
str(data$date[0])
str(data$date[1])
print(data$date[1])
data$date <- lapply(data$date, date_fun)
View(data)
str(data)
write.csv(data, "data.csv")
runApp('mmtc')
runApp('mmtc')
read.csv("data.csv")
runApp('mmtc')
read.csv("data.csv")
runApp('mmtc')
read.csv("data.csv")
runApp('mmtc')
read.csv("data.csv")
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
read.csv("data.csv")
library(shiny)
# For bar graphs
library(ggplot2)
# For proportional Symbol Maps
library(leaflet)
# For data querying
library(RSocrata)
library(shinycssloaders)
date_start <- as.Date("2020-01-22")
date_end <- as.Date(Sys.Date(),'%Y-%m-01') - 1
date_fun <- function(d) {return(as.Date(d, origin='1970-01-01'))}
data <- NULL;
token <- "GEqZLQSLJw1JgqEUGXlbsHq2y"
fd <- function(d) { return(format(d, '%Y-%m-%d'))}
melb_pedestrian_counts <- read.socrata(sprintf("https://data.melbourne.vic.gov.au/resource/b2ak-trbp.json?$select=sensor_id, sensor_name as place, date_trunc_ymd(date_time) AS date, SUM(hourly_counts) as count&$where=date >= '%s' AND date <= '%s' &$group=sensor_id, sensor_name, date&$order=sensor_id", fd(date_start), fd(date_end)) ,app_token = token)
melb_pedestrian_counts$date <- sapply(melb_pedestrian_counts$date, FUN=date_fun)
melb_ped_cnt_sensors <- read.socrata("https://data.melbourne.vic.gov.au/resource/h57g-5234.json?$select=sensor_id,latitude,longitude",app_token = token)
merged_ped_data <- merge.data.frame(melb_ped_cnt_sensors, melb_pedestrian_counts, by="sensor_id")[, -1]
merged_ped_data$type = "ped";
melb_parking_bay_counts <- read.socrata(sprintf("https://data.melbourne.vic.gov.au/resource/4n3a-s6rn.json?$select=MEDIAN(BayId) as bay, AreaName as place, date_trunc_ymd(ArrivalTime) AS date, SUM(VehiclePresent) as count&$where=date >= '%s' and date <= '%s' &$group=place, date&$order=bay", fd(date_start), fd(date_end)),app_token = token)
melb_parking_bay_counts$date <- sapply(melb_parking_bay_counts$date, FUN=date_fun)
melb_parking_bay_sensors <-  read.socrata("https://data.melbourne.vic.gov.au/resource/vh2v-4nfs.json?$select= bay_id as bay, lat as latitude, lon as longitude&$order=bay" ,app_token = token)
merged_park_data <- merge.data.frame(melb_parking_bay_sensors, melb_parking_bay_counts, by="bay")[, -1]
merged_park_data$type = "park";
covid_data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", header = TRUE)
covid_data <- covid_data[covid_data$Country=="Australia",]
covid_data <- stack(aggregate.data.frame(covid_data[, -c(1:4)], by=list(Country=covid_data[,"Country.Region"] == "Australia"), FUN=sum)[, -1])
colnames(covid_data) <- c('count', 'date')
covid_data$date <- sapply(X=levels(covid_data$date), FUN=(function (dt) {
if (startsWith(x = dt, prefix =  'X')){
dt <- paste0('0', substring(text = dt, first =  2))
}
return(as.Date(x = dt, format="%m.%d.%y", origin='1970-01-01'))
}))
covid_data$daily_case_counts[-1] <- covid_data$daily_case_counts[-1] - head(covid_data$daily_case_counts, -1)
covid_data = covid_data[covid_data$date >= date_start && covid_data$date >= date_start]
covid_data$latitude = -37.8136
covid_data$longitude = 144.9631
covid_data$type="covid"
covid_data$place = "australia";
data <- rbind(merged_ped_data, merged_park_data, covid_data);
View(data)
str(data)
write.csv(data, "data.csv")
write.csv(data, "mmtc/data.csv")
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
data <- read.csv("data.csv", stringsAsFactors = FALSE)
runApp('mmtc')
data <- read.csv("mmtc/data.csv")
ggplot(data[data$type == 'covid', ], aes(x=date, y=count)) + geom_col() + geom_smooth() + xlab("Day")
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
View(data)
library(shiny)
# For bar graphs
library(ggplot2)
# For proportional Symbol Maps
library(leaflet)
# For data querying
library(RSocrata)
library(shinycssloaders)
date_start <- as.Date("2020-01-22")
date_end <- as.Date(Sys.Date(),'%Y-%m-01') - 1
token <- "GEqZLQSLJw1JgqEUGXlbsHq2y"
covid_data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", header = TRUE)
View(covid_data)
covid_data <- covid_data[covid_data$Country=="Australia",]
covid_data <- stack(aggregate.data.frame(covid_data[, -c(1:4)], by=list(Country=covid_data[,"Country.Region"] == "Australia"), FUN=sum)[, -1])
View(covid_data)
colnames(covid_data) <- c('count', 'date')
View(covid_data)
covid_data$date <- sapply(X=levels(covid_data$date), FUN=(function (dt) {
if (startsWith(x = dt, prefix =  'X')){
dt <- paste0('0', substring(text = dt, first =  2))
}
return(str(as.Date(x = dt, format="%m.%d.%y", origin='1970-01-01')))
}))
View(covid_data)
covid_data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", header = TRUE)
covid_data <- covid_data[covid_data$Country=="Australia",]
covid_data <- stack(aggregate.data.frame(covid_data[, -c(1:4)], by=list(Country=covid_data[,"Country.Region"] == "Australia"), FUN=sum)[, -1])
colnames(covid_data) <- c('count', 'date')
covid_data$date <- sapply(X=levels(covid_data$date), FUN=(function (dt) {
if (startsWith(x = dt, prefix =  'X')){
dt <- paste0('0', substring(text = dt, first =  2))
}
return(str(as.Date(x = dt, format="%m.%d.%y", origin='1970-01-01'))[1])
}))
covid_data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", header = TRUE)
covid_data <- covid_data[covid_data$Country=="Australia",]
covid_data <- stack(aggregate.data.frame(covid_data[, -c(1:4)], by=list(Country=covid_data[,"Country.Region"] == "Australia"), FUN=sum)[, -1])
colnames(covid_data) <- c('count', 'date')
covid_data$date <- sapply(X=levels(covid_data$date), FUN=(function (dt) {
if (startsWith(x = dt, prefix =  'X')){
dt <- paste0('0', substring(text = dt, first =  2))
}
return(paste(as.Date(x = dt, format="%m.%d.%y", origin='1970-01-01')))
}))
View(covid_data)
covid_data$daily_case_counts[-1] <- covid_data$daily_case_counts[-1] - head(covid_data$daily_case_counts, -1)
covid_dates <- sapply(covid_data$date, function(d){return(as.Date(d, '%Y-%m-%d'))})
covid_data = covid_data[covid_dates >= date_start && covid_dates >= date_start]
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
read.csv("mmtc/data.csv")$date
sapply(read.csv("mmtc/data.csv")$date, ymd)
sapply(read.csv("mmtc/data.csv")$date, as.Date)
sapply(read.csv("mmtc/data.csv")$date, as.Date)[1]
lapply(read.csv("mmtc/data.csv")$date, as.Date)
lapply(read.csv("mmtc/data.csv")$date, as.Date)[[1]]
lapply(read.csv("mmtc/data.csv")$date, as.Date)[1]
str(lapply(read.csv("mmtc/data.csv")$date, as.Date))
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
read.csv("data.csv")
read.csv("mmtc/data.csv")
data <- read.csv("mmtc/data.csv")
data$date
runApp('mmtc')
source('C:/Users/Naren/Desktop/Project/Melbourne COVID Tracker/data explorer.R', echo=TRUE)
covid_data$date <- Reduce(c, lapply(covid_data$date, FUN=date_fun))
ggplot(covid_data, aes(x=date, y=daily_case_counts)) + geom_col() + geom_smooth()
View(covid_data)
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
data <- read.csv("mmtc/data.csv")
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
data <- read.csv("mmtc/data.csv")
str(data)
sapply(data$date, as.Date)
lapply(data$date, as.Date)
reduce(c, lapply(data$date, as.Date))
Reduce(c, lapply(data$date, as.Date))
data$date <- lapply(data$date, as.Date)
ggplot(data[data$type == 'covid', ], aes(x=date, y=count)) + geom_col() + geom_smooth() + xlab("Day") + scale_x_date(labels="%B %d")
ggplot(data[data$type == 'covid', ], aes(x=date, y=count)) + geom_col() + geom_smooth() + xlab("Day")
ggplot(data[data$type == 'covid', ], aes(x=date, y=count)) + geom_col() + geom_smooth()
ggplot(data[data$type == 'covid', ], aes(x=date, y=count)) + geom_col() + geom_smooth() + xlab("Day") + scale_x_date(labels="%B %d")
covid_data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", header = TRUE)
covid_data <- covid_data[covid_data$Country=="Australia",]
covid_data <- stack(aggregate.data.frame(covid_data[, -c(1:4)], by=list(Country=covid_data[,"Country.Region"] == "Australia"), FUN=sum)[, -1])
colnames(covid_data) <- c('daily_case_counts', 'date')
covid_data$date <- sapply(X=levels(covid_data$date), FUN=(function (dt) {
if (startsWith(x = dt, prefix =  'X')){
dt <- paste0('0', substring(text = dt, first =  2))
}
return(as.Date(x = dt, format="%m.%d.%y", origin='1970-01-01'))
}))
covid_data$daily_case_counts[-1] <- covid_data$daily_case_counts[-1] - head(covid_data$daily_case_counts, -1)
View(covid_data)
image(missing_data.frame(covid_data))
covid_data$date <- Reduce(c, lapply(covid_data$date, FUN=date_fun))
date_fun <- function(d) {return(as.Date(d, origin='1970-01-01'))}
covid_data$date <- Reduce(c, lapply(covid_data$date, FUN=date_fun))
ggplot(covid_data, aes(x=date, y=daily_case_counts)) + geom_col() + geom_smooth()
View(covid_data)
View(data)
library(shiny)
# For bar graphs
library(ggplot2)
# For proportional Symbol Maps
library(leaflet)
# For data querying
library(RSocrata)
library(shinycssloaders)
library(lubridate)
date_start <- as.Date("2020-01-22")
date_end <- as.Date(Sys.Date(),'%Y-%m-01') - 1
date_fun <- date_fun <- function(d) {return(as.Date(d, origin='1970-01-01'))}
token <- "GEqZLQSLJw1JgqEUGXlbsHq2y"
covid_data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", header = TRUE)
covid_data <- covid_data[covid_data$Country=="Australia",]
covid_data <- stack(aggregate.data.frame(covid_data[, -c(1:4)], by=list(Country=covid_data[,"Country.Region"] == "Australia"), FUN=sum)[, -1])
colnames(covid_data) <- c('count', 'date')
covid_data$date <- sapply(X=levels(covid_data$date), FUN=(function (dt) {
if (startsWith(x = dt, prefix =  'X')){
dt <- paste0('0', substring(text = dt, first =  2))
}
return(as.Date(x = dt, format="%m.%d.%y", origin='1970-01-01'))
}))
covid_data$daily_case_counts[-1] <- covid_data$daily_case_counts[-1] - head(covid_data$daily_case_counts, -1)
View(covid_data)
library(shiny)
# For bar graphs
library(ggplot2)
# For proportional Symbol Maps
library(leaflet)
# For data querying
library(RSocrata)
library(shinycssloaders)
library(lubridate)
date_start <- as.Date("2020-01-22")
date_end <- as.Date(Sys.Date(),'%Y-%m-01') - 1
date_fun <- date_fun <- function(d) {return(as.Date(d, origin='1970-01-01'))}
token <- "GEqZLQSLJw1JgqEUGXlbsHq2y"
covid_data <- read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv", header = TRUE)
covid_data <- covid_data[covid_data$Country=="Australia",]
covid_data <- stack(aggregate.data.frame(covid_data[, -c(1:4)], by=list(Country=covid_data[,"Country.Region"] == "Australia"), FUN=sum)[, -1])
colnames(covid_data) <- c('count', 'date')
covid_data$date <- sapply(X=levels(covid_data$date), FUN=(function (dt) {
if (startsWith(x = dt, prefix =  'X')){
dt <- paste0('0', substring(text = dt, first =  2))
}
return(as.Date(x = dt, format="%m.%d.%y", origin='1970-01-01'))
}))
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
data <- read.csv("mmtc/data.csv")
ggplot(data[data$type == 'covid', ], aes(x=date, y=count)) + geom_col() + geom_smooth() + xlab("Day")
str(data)
str(lappy(data$date, as.Date))
str(lapply(data$date, as.Date))
data$date <- lapply(data$date, as.Date)
ggplot(data[data$type == 'covid', ], aes(x=date, y=count)) + geom_col() + geom_smooth() + xlab("Day")
ggplot(data[data$type == 'covid', ], aes(x=date, y=count)) + geom_col() + geom_smooth() + xlab("Day") + scale_x_date()
ggplot(data[data$type == 'covid', ], aes(x=date, y=count)) + geom_col() + geom_smooth() + xlab("Day")
class(data$date)
class(data$date[1])
class(data$date[[1]])
data <- read.csv("mmtc/data.csv")
data$date <- Reduce(c, lapply(data$date, as.Date))
str(data)
ggplot(data[data$type == 'covid', ], aes(x=date, y=count)) + geom_col() + geom_smooth() + xlab("Day") + scale_x_date()
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
colnames(read.csv("mmtc/data.csv"))
-c(1:4, 7)
runApp('mmtc')
data <- read.csv("mmtc/data.csv")
data <- data[data$type = 'covid']
data <- data[data$type == 'covid', ]
data[, -c(1:4, 7)]
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
month(data$date[1])
runApp('mmtc')
runApp('mmtc')
str(data)
data$date <- Reduce(c, lapply(data$date, as.Date))
str(data)
covid_data <- (data[data$type == 'covid' && sapply(data$date, function(d)(format(d, "%B"))) == format(input$day, "%B") , ])[, -c(1:4, 7)]
covid_data <- (data[data$type == 'covid' && sapply(data$date, function(d)(format(d, "%B"))) == format(as.Date("2020-01-22"), "%B") , ])[, -c(1:4, 7)]
View(covid_data)
covid_data <- (data[data$type == 'covid' && format(data$date, "%B") == format(as.Date("2020-01-22"), "%B") , ])[, -c(1:4, 7)]
View(covid_data)
format(as.Date(Sys.Date()), "%B")
format(data$date, "%B")
format(data$date, "%B") == format(as.Date(Sys.Date()), "%B")
covid_data[format(data$date, "%B") == format(as.Date(Sys.Date()), "%B"), ]
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
data$date==(as.Date(Sys.Date())-25)
if(data$date==(as.Date(Sys.Date())-25)) paste(as.Date(Sys.Date())-25)) else "other days"
if(data$date==(as.Date(Sys.Date())-25)) paste(as.Date(Sys.Date())-25) else "other days"
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
View(covid_data)
covid_data$month <- format(covid_data$date, "%B")
View(covid_data)
aggregate(covid_data[, -1], by = list(covid_data$month), FUN = sum)
aggregate(covid_data[, -1], by = list(covid_data$month), sum)
str(covid_data)
str(covid_data[, -1])
covid_data$month <- factor(format(covid_data$date, "%B"))
aggregate(covid_data[, -1], by = list(covid_data$month), sum)
covid_data$month <- format(covid_data$date, "%B")
aggregate(count ~ month, covid_data[, -1], sum)
runApp('mmtc')
runApp('mmtc')
View(covid_data)
aggregate(count ~ month, covid_data[, -1], sum)
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
str(coid_data)
str(covid_data)
runApp('mmtc')
aggregate(month ~ count, covid_data[, -1], sum)
aggregate(count ~ month, covid_data[, -1], sum)
runApp('mmtc')
View(covid_data)
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
as.Date(covid_data$date, format="%Y-%m-01")
Sys.Date()
as.Date(Sys.Date(), '%Y-%m-01')
as.Date(Sys.Date(), '%Y-%m-01')-1
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
shiny::runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
install.packages(plotly)
install.packages('plotly')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
data("diamonds", package = "ggplot2")
data(diamonds, package = "ggplot2")
plot_ly(diamonds, x = ~cut)
plot_ly(diamonds, x = ~cut)
plot_ly(diamonds, x = ~cut, trace ="histogram")
plot_ly(diamonds, x = ~cut, type ="histogram")
plot_ly(diamonds, x = ~cut, type = "histogram")
plot_ly(diamonds, x = ~cut, type = "histogram")
shiny::runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp()
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp()
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp()
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
runApp('mmtc')
shiny::runApp('mmtc')
shiny::runApp('mmtc')
runApp('mmtc')
